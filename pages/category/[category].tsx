import { ArticleList, Tabs, Pagination } from '@/components'
import { fetchArticles, fetchCategories } from '@/http'
import { ICollectionResponse, ICategory, IPagination, IArticle, IQueryOptions } from '@/types'
import { AxiosResponse } from 'axios'
import { GetServerSideProps } from 'next'
import Head from 'next/head'
import React from 'react'
import qs from 'qs';
import { capitalizeFirstLetter, debounce, formattedCategory, makeCategory } from '@/utils'
import { useRouter } from 'next/router'

interface IPropTypes {
	categories: {
		items: ICategory[];
		pagination: IPagination
	},
	articles: {
		items: IArticle[]
		pagination: IPagination
	},
	slug: string
}

const category = ({ categories, articles, slug }: IPropTypes) => {
	const router = useRouter()
	const { category: categorySlug } = router.query

	const { page, pageCount } = articles.pagination

	// const formattedCategory = () => {
	// 	return capitalizeFirstLetter(makeCategory(slug))
	// }
	const handleSearch = (query: string) => {
		router.push(`/category/${categorySlug}/?search=${query}`)
	}

	return (
		<>
			<Head>
				<title>Create Next App {formattedCategory(slug)} </title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<Tabs categories={categories.items} handleOnSearch={debounce(handleSearch, 500)} />
			<ArticleList articles={articles.items} />
			<Pagination page={page} pageCount={pageCount} redirectUrl={`/category/${categorySlug}`} />

		</>
	)
}

export default category

export const getServerSideProps: GetServerSideProps = async ({ query }) => {
	// console.log(query.category)
	// articles
	const options: IQueryOptions = {
		populate: ['author.avatar'],
		sort: ['id:desc'],
		filters: {
			category: {
				slug: query.category,
			},
		},
		pagination: {
			page: query.page ? +query.page : 1,
			pageSize: 1
		}
	}

	if (query.search) {
		options.filters = {
			Title: {
				$containsi: query.search
			}
		}
	}

	const queryString = qs.stringify(options)

	const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticles(queryString)

	const { data: categories }: AxiosResponse<ICollectionResponse<ICategory[]>> = await fetchCategories()

	return {
		props: {
			categories: {
				items: categories.data,
				pagination: categories.meta.pagination
			},
			articles: {
				items: articles.data,
				pagination: articles.meta.pagination
			},
			slug: query.category
		}
	}

}
import React from 'react'
import { fetchArticlesBySlug } from '@/http'
import { GetServerSideProps } from 'next'
import qs from 'qs'
import { AxiosResponse } from 'axios'
import { IArticle, ICollectionResponse } from '@/types'
import Head from 'next/head'
import Image from 'next/image'
import { formatDate, formattedCategory, serializeMarkdown } from '@/utils'
import { MDXRemote, MDXRemoteSerializeResult } from 'next-mdx-remote'

interface IProptype {
	article: IArticle,
	notFound?: boolean
	slug: string
}

const slug = ({ article, notFound = false, slug }: IProptype) => {

	const loaderProp = ({ src }) => {
		return src;
	}

	return (
		<>
			<Head>
				<title> {formattedCategory(slug)} </title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<div className='my-12 grid lg:grid-cols-3 gap-12 single-article'>
				<div className='col-span-2 text-3xl font-bold'>{article.attributes.Title}
					<div className='flex items-center my-4'>
						<div className='rounded-lg overflow-hidden flex items-center justify-center mr-2'>
							<Image
								src={`${process.env.API_BASE_URL}${article.attributes.author.data.attributes.avatar.data.attributes.formats.thumbnail.url}`}
								height={40}
								width={40} alt={''}
								loader={loaderProp}
							/>
						</div>
						<span className='text-sm font-bold text-gray-600'>
							{article.attributes.author.data.attributes.firstname}{' '}
							{article.attributes.author.data.attributes.lastname} on
							&nbsp;
							<span className='text-gray-400'>
								{formatDate(article.attributes.createdAt)}
							</span>
						</span>
					</div>
					<div className='text-lg text-gray-600 leading-8'>
						<img className='w-full my-12 mb-6' src={`${process.env.API_BASE_URL}${article.attributes.images.data.attributes.url}`} alt="" />
						<MDXRemote {...(article.attributes.body as MDXRemoteSerializeResult)} />
					</div>
				</div>
				<div>Right</div>
			</div>
		</>
	)
}


export const getServerSideProps: GetServerSideProps = async ({ query }) => {
	// console.log(query.slug)

	const queryString = qs.stringify({
		populate: ['images', 'author.avatar'],
		filters: {
			Slug: {
				$eq: query.slug
			}
		}

	})

	const { data: articles }: AxiosResponse<ICollectionResponse<IArticle[]>> = await fetchArticlesBySlug(queryString)

	if (articles.data.length === 0) {
		return {
			notFound: true
		}
	}

	return {
		props: {
			article: await serializeMarkdown(articles.data[0]),
			slug: query.slug
		}
	}
}

export default slug
